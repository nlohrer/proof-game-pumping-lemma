msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Thu Jul 24 19:18:38 2025\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! 🎉"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings… 🎭"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! 🎉"
msgstr ""

#: Game.Levels.LeanBasics.L01_rfl
msgid "rfl"
msgstr ""

#: Game.Levels.LeanBasics.L01_rfl
msgid "# Introduction\n"
"Let's look at some of the very basics of Lean.\n"
"## Proof state\n"
"In the middle bottom of the screen, you'll find the proof state, which includes\n"
"both the goal of the proof, as well as all objects and assumptions that you may\n"
"use to arrive at the proof.\n"
"## rfl\n"
"The `rfl` tactic closes the goal with pure reflexivity."
msgstr ""

#: Game.Levels.LeanBasics.L01_rfl
msgid "Use `rfl` to close the goal immediately."
msgstr ""

#: Game.Levels.LeanBasics.L01_rfl
msgid "Good! `rfl` isn't required very often, but we do need it sometimes."
msgstr ""

#: Game.Levels.LeanBasics.L02_exact
msgid "exact"
msgstr ""

#: Game.Levels.LeanBasics.L02_exact
msgid "# exact\n"
"whenever a hypothesis matches the goal precisely, we can use `exact` to close out the goal."
msgstr ""

#: Game.Levels.LeanBasics.L02_exact
msgid "Use `exact «{h}»` to close the goal immediately."
msgstr ""

#: Game.Levels.LeanBasics.L02_exact
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L03_Third
msgid "Third Level"
msgstr ""

#: Game.Levels.LeanBasics.L03_Third
msgid "# Introduction\n"
"In this level, we'll be looking at..."
msgstr ""

#: Game.Levels.LeanBasics.L03_Third
msgid "You can either abc start using"
msgstr ""

#: Game.Levels.LeanBasics.L03_Third
msgid "You should use `«{h}»` now."
msgstr ""

#: Game.Levels.LeanBasics.L03_Third
msgid "You should use `«{g}»` now."
msgstr ""

#: Game.Levels.LeanBasics.L03_Third
msgid "This last message appears if the level is solved."
msgstr ""

#: Game.Levels.LeanBasics.L04_intro
msgid "exact"
msgstr ""

#: Game.Levels.LeanBasics.L04_intro
msgid "# intro\n"
"We use the `intro` tactic to handle both `∀`-statements, and to introduce the antecedent\n"
"of an implication."
msgstr ""

#: Game.Levels.LeanBasics.L04_intro
msgid "start with `intro A`"
msgstr ""

#: Game.Levels.LeanBasics.L04_intro
msgid "Now, `intro ha` will introduce the antecedent into our given hypotheses."
msgstr ""

#: Game.Levels.LeanBasics.L04_intro
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L05_apply
msgid "apply"
msgstr ""

#: Game.Levels.LeanBasics.L05_apply
msgid "# apply\n"
"whenever a hypothesis matches the goal precisely, we can use `exact` to close out the goal."
msgstr ""

#: Game.Levels.LeanBasics.L05_apply
msgid "Use `apply «{hAB}» at «{hA}»`."
msgstr ""

#: Game.Levels.LeanBasics.L05_apply
msgid "`exact «{hA}»` will close the goal now."
msgstr ""

#: Game.Levels.LeanBasics.L05_apply
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L06_have
msgid "have"
msgstr ""

#: Game.Levels.LeanBasics.L06_have
msgid "# have\n"
"Sometimes, we want to construct sub-hypotheses of our own. We can do this with the\n"
"`have` tactic."
msgstr ""

#: Game.Levels.LeanBasics.L06_have
msgid "Use `exact «{h}»` to close the goal immediately"
msgstr ""

#: Game.Levels.LeanBasics.L06_have
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L07_clear
msgid "exact"
msgstr ""

#: Game.Levels.LeanBasics.L07_clear
msgid "# clear\n"
"Sometimes, especially when proving a lemma via `have`, the proof state might include a\n"
"lot of hypotheses that are not necessary to achieve the current goal. To keep them from\n"
"distracting us, we can use the `clear` tactic to remove them."
msgstr ""

#: Game.Levels.LeanBasics.L07_clear
msgid "Use `clear «{a}» «{b}» «{c}» «{d}» «{e}» «{f}» «{hy}» «{hz}» «{y}» «{z}»` to remove the unneeded hypotheses"
msgstr ""

#: Game.Levels.LeanBasics.L07_clear
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L08_constructor
msgid "exact"
msgstr ""

#: Game.Levels.LeanBasics.L08_constructor
msgid "# Induction\n"
"To work through certain structures, the `constructor` can be useful."
msgstr ""

#: Game.Levels.LeanBasics.L08_constructor
msgid "Use `constructor` to split the conjunction we want to prove into two separate goals."
msgstr ""

#: Game.Levels.LeanBasics.L08_constructor
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L09_induction
msgid "exact"
msgstr ""

#: Game.Levels.LeanBasics.L09_induction
msgid "# Induction\n"
"We utilize several inductive structures that we can handle with the `induction'` tactic."
msgstr ""

#: Game.Levels.LeanBasics.L09_induction
msgid "Use `induction' «{n}» with n ih` to start a proof by induction"
msgstr ""

#: Game.Levels.LeanBasics.L09_induction
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L10_match
msgid "exact"
msgstr ""

#: Game.Levels.LeanBasics.L10_match
msgid "# match\n"
"For some structures, we might just need to match the forms that they can appear in."
msgstr ""

#: Game.Levels.LeanBasics.L10_match
msgid "Use `exact «{h}»` to close the goal immediately"
msgstr ""

#: Game.Levels.LeanBasics.L10_match
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L11_simp_only
msgid "exact"
msgstr ""

#: Game.Levels.LeanBasics.L11_simp_only
msgid "# simp only\n"
"whenever a hypothesis matches the goal precisely, we can use `exact` to close out the goal."
msgstr ""

#: Game.Levels.LeanBasics.L11_simp_only
msgid "Use `exact «{h}»` to close the goal immediately"
msgstr ""

#: Game.Levels.LeanBasics.L11_simp_only
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L12_simp_all_only
msgid "exact"
msgstr ""

#: Game.Levels.LeanBasics.L12_simp_all_only
msgid "# simp_all only\n"
"whenever a hypothesis matches the goal precisely, we can use `exact` to close out the goal."
msgstr ""

#: Game.Levels.LeanBasics.L12_simp_all_only
msgid "Use `exact «{h}»` to close the goal immediately"
msgstr ""

#: Game.Levels.LeanBasics.L12_simp_all_only
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L13_omega
msgid "omega"
msgstr ""

#: Game.Levels.LeanBasics.L13_omega
msgid "# omega\n"
"The tactic `omega` can solve integer and natural linear arithmetic problems."
msgstr ""

#: Game.Levels.LeanBasics.L13_omega
msgid "Use `omega` to close the goal immediately"
msgstr ""

#: Game.Levels.LeanBasics.L13_omega
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L14_split_ifs
msgid "split_ifs"
msgstr ""

#: Game.Levels.LeanBasics.L14_split_ifs
msgid "# split_ifs\n"
"The tactic `split_ifs` allows us to handle `if` statements in our goal."
msgstr ""

#: Game.Levels.LeanBasics.L14_split_ifs
msgid "Use `split_ifs with h`."
msgstr ""

#: Game.Levels.LeanBasics.L14_split_ifs
msgid "`rfl` closes the goal."
msgstr ""

#: Game.Levels.LeanBasics.L14_split_ifs
msgid "Use `exact h rfl`."
msgstr ""

#: Game.Levels.LeanBasics.L14_split_ifs
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L15_use
msgid "use"
msgstr ""

#: Game.Levels.LeanBasics.L15_use
msgid "# use\n"
"We can resolve existential quantors with the help of the `use` keyword."
msgstr ""

#: Game.Levels.LeanBasics.L15_use
msgid "We want to set n := 4: `use 4`."
msgstr ""

#: Game.Levels.LeanBasics.L15_use
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics
msgid "Lean Basics"
msgstr ""

#: Game.Levels.LeanBasics
msgid "This introductory part serves as a refresher for Lean."
msgstr ""

#: Game.Levels.Lemmas.L01_Introduction
msgid "First Lemma"
msgstr ""

#: Game.Levels.Lemmas.L01_Introduction
msgid "This text is shown as first message when the level is played.\n"
"You can insert hints in the proof below. They will appear in this side panel\n"
"depending on the proof a user provides."
msgstr ""

#: Game.Levels.Lemmas.L01_Introduction
msgid "You can lemma either start using `«{h}»` or `«{g}»`."
msgstr ""

#: Game.Levels.Lemmas.L01_Introduction
msgid "You should use `«{h}»` now."
msgstr ""

#: Game.Levels.Lemmas.L01_Introduction
msgid "You should use `«{g}»` now."
msgstr ""

#: Game.Levels.Lemmas.L01_Introduction
msgid "This last message appears if the level is solved."
msgstr ""

#: Game.Levels.Lemmas.L02_cat_eps
msgid "cat_eps"
msgstr ""

#: Game.Levels.Lemmas.L02_cat_eps
msgid "Let's prove a simple lemma: concatenating any word with the empty word should yield the word itself."
msgstr ""

#: Game.Levels.Lemmas.L02_cat_eps
msgid "Concatenating a word with ε yields the original word."
msgstr ""

#: Game.Levels.Lemmas.L02_cat_eps
msgid "Concatenation of words: for two words w₁ and w₂, the concatenation w₁ and w₂ yields w₁w₂."
msgstr ""

#: Game.Levels.Lemmas.L02_cat_eps
msgid "A word over an alphabet, i.e. a string of symbols from that alphabet."
msgstr ""

#: Game.Levels.Lemmas.L02_cat_eps
msgid "This proof calls for an induction! Try starting with `induction' w with s w ih`."
msgstr ""

#: Game.Levels.Lemmas.L02_cat_eps
msgid "This is essentially true by definition of `Word.cat`."
msgstr ""

#: Game.Levels.Lemmas.L02_cat_eps
msgid "`rw [Word.cat]`."
msgstr ""

#: Game.Levels.Lemmas.L02_cat_eps
msgid "`rw [Word.cat, ih]`."
msgstr ""

#: Game.Levels.Lemmas.L02_cat_eps
msgid "Good!"
msgstr ""

#: Game.Levels.Lemmas.L03_cat_assoc
msgid "cat_assoc"
msgstr ""

#: Game.Levels.Lemmas.L03_cat_assoc
msgid "Let's prove another basic lemma: concatenation is associative."
msgstr ""

#: Game.Levels.Lemmas.L03_cat_assoc
msgid "Concatenation of words is associative, e.g. (x ∘ y) ∘ z = x ∘ (y ∘ z)."
msgstr ""

#: Game.Levels.Lemmas.L03_cat_assoc
msgid "Once again, start with `inductino' «{x}» with s w ih`."
msgstr ""

#: Game.Levels.Lemmas.L03_cat_assoc
msgid "Either rewrite with `Word.cat` multiple times, or just\n"
"use `simp [Word.cat]`."
msgstr ""

#: Game.Levels.Lemmas.L03_cat_assoc
msgid "Rewriting with `Word.cat` and then with `ih` works, or just use `simp_all [Word.cat]`."
msgstr ""

#: Game.Levels.Lemmas.L03_cat_assoc
msgid "Good! Incidentally, we've just shown that strings together with concatenation form a monoid."
msgstr ""

#: Game.Levels.Lemmas.L04_gap
msgid "cat_assoc"
msgstr ""

#: Game.Levels.Lemmas.L04_gap
msgid "Let's prove a simple lemma: concatenating any word with the empty word should yield the word itself."
msgstr ""

#: Game.Levels.Lemmas.L04_gap
msgid "Good!"
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "assoc_count"
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "We've just introduced the `count` definition, which counts how many times a certain character occurs in a word. Let's show that we can get the count for a character in a word by summing up the counts in its subwords."
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "for the concatenation of two words, counting the occurrences of a certain character in the entire word\n"
"is the same as counting the occurrences in both subwords and adding them up."
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "Counts how often a character occurs in a word."
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "Start with `induction' x with s' w ih`."
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "Utilize `Word.cat` and `Word.count`."
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "`simp [Word.cat, Word.count]`"
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "Remember you can use the tactic `split_ifs` to handle if statements."
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "`simp [Word.cat, Word.count]`"
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "`split_ifs with h`"
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "`omega` will solve this goal directly!"
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "`exact «{ih}»` closes the goal immediately."
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "Good!"
msgstr ""

#: Game.Levels.Lemmas.L06_cat_count_zero
msgid "cat_count_zero"
msgstr ""

#: Game.Levels.Lemmas.L06_cat_count_zero
msgid "We'll need a special case of the lemma we just showed later on: when a certain character does not occur in a word, it won't appear in any of its subwords either."
msgstr ""

#: Game.Levels.Lemmas.L06_cat_count_zero
msgid "If a symbol doesn't occur in the concatenation of two words, then it won't occur in any of the two words either."
msgstr ""

#: Game.Levels.Lemmas.L06_cat_count_zero
msgid "Let's start out by introducing the antecedent: `intro hcatcount`"
msgstr ""

#: Game.Levels.Lemmas.L06_cat_count_zero
msgid "To split the conjunction, let's use the `constructor` tactic."
msgstr ""

#: Game.Levels.Lemmas.L06_cat_count_zero
msgid "Use the theorem `Nat.add_eq_zero`"
msgstr ""

#: Game.Levels.Lemmas.L06_cat_count_zero
msgid "simp_all [cat_count, Nat.add_eq_zero]"
msgstr ""

#: Game.Levels.Lemmas.L06_cat_count_zero
msgid "Use the theorem `Nat.add_eq_zero_iff`"
msgstr ""

#: Game.Levels.Lemmas.L06_cat_count_zero
msgid "simp_all [cat_count, Nat.add_eq_zero_iff]"
msgstr ""

#: Game.Levels.Lemmas.L06_cat_count_zero
msgid "Good!"
msgstr ""

#: Game.Levels.Lemmas.L07_cat_len
msgid "cat_len"
msgstr ""

#: Game.Levels.Lemmas.L07_cat_len
msgid "Our new definition `length` defines the length of a word. Let's show that the length of a word is equal to the sum of its subwords."
msgstr ""

#: Game.Levels.Lemmas.L07_cat_len
msgid "To determine the length of the concatenation of two words, you can add the length of both words."
msgstr ""

#: Game.Levels.Lemmas.L07_cat_len
msgid "The amount of symbols in a word."
msgstr ""

#: Game.Levels.Lemmas.L07_cat_len
msgid "This calls for yet another induction: `induction' x with _ x ih`"
msgstr ""

#: Game.Levels.Lemmas.L07_cat_len
msgid "`Nat.zero_add` should be useful at some point."
msgstr ""

#: Game.Levels.Lemmas.L07_cat_len
msgid "`simp only [Word.cat, Word.length, Nat.zero_add]`"
msgstr ""

#: Game.Levels.Lemmas.L07_cat_len
msgid "Use `Nat.add_assoc`."
msgstr ""

#: Game.Levels.Lemmas.L07_cat_len
msgid "`simp_all [Word.length, Word.cat, «{ih}», Nat.add_assoc]`"
msgstr ""

#: Game.Levels.Lemmas.L07_cat_len
msgid "Good!"
msgstr ""

#: Game.Levels.Lemmas.L08_pow_len
msgid "pow_len"
msgstr ""

#: Game.Levels.Lemmas.L08_pow_len
msgid "The `pow` definition allows us to create strings of the form aⁿ, such as a⁴ = aaaa. We want to show that aⁿ is n characters long."
msgstr ""

#: Game.Levels.Lemmas.L08_pow_len
msgid "The length of cⁿ is n for any character c."
msgstr ""

#: Game.Levels.Lemmas.L08_pow_len
msgid "The power of a symbol: aⁿ = a...a repeated n times."
msgstr ""

#: Game.Levels.Lemmas.L08_pow_len
msgid "This is yet another induction, this time over `«{n}»`:\n"
"`induction' «{n}» with n ih`."
msgstr ""

#: Game.Levels.Lemmas.L08_pow_len
msgid "`rfl` closes the goal immediately."
msgstr ""

#: Game.Levels.Lemmas.L08_pow_len
msgid "The lemma `Nat.one_add` will be useful here."
msgstr ""

#: Game.Levels.Lemmas.L08_pow_len
msgid "`simp only [Word.length, «{ih}», Nat.one_add]`"
msgstr ""

#: Game.Levels.Lemmas.L08_pow_len
msgid "Good!"
msgstr ""

#: Game.Levels.Lemmas.L09_pow_count
msgid "pow_count"
msgstr ""

#: Game.Levels.Lemmas.L09_pow_count
msgid "For our last lemma, we will show that for a word of the form cⁿ, it will contain n instances of c, and none of any other character."
msgstr ""

#: Game.Levels.Lemmas.L09_pow_count
msgid "A word of the form cⁿ will contain n instances of the character c, and none of any other character."
msgstr ""

#: Game.Levels.Lemmas.L09_pow_count
msgid "This is another induction: `induction' «{n}» with n ih`."
msgstr ""

#: Game.Levels.Lemmas.L09_pow_count
msgid "`simp [Word.count]`"
msgstr ""

#: Game.Levels.Lemmas.L09_pow_count
msgid "`simp [Word.count]` to introduce the `if` statement in the goal."
msgstr ""

#: Game.Levels.Lemmas.L09_pow_count
msgid "`split_ifs with h`"
msgstr ""

#: Game.Levels.Lemmas.L09_pow_count
msgid "`simp_all` followed by `omega` will close the goal."
msgstr ""

#: Game.Levels.Lemmas.L09_pow_count
msgid "`simp_all` closes the goal."
msgstr ""

#: Game.Levels.Lemmas.L09_pow_count
msgid "Good!"
msgstr ""

#: Game.Levels.Lemmas.L10_cons_a
msgid "cons_a"
msgstr ""

#: Game.Levels.Lemmas.L10_cons_a
msgid "For the last level of this game, let's prove a much more complex statement!\n"
"While it will be much more involved to prove than the other statements in this world,\n"
"it will also be very useful in our non-regularity proof."
msgstr ""

#: Game.Levels.Lemmas.L10_cons_a
msgid "A word of the form cⁿ will contain n instances of the character c, and none of any other character."
msgstr ""

#: Game.Levels.Lemmas.L10_cons_a
msgid "Good!"
msgstr ""

#: Game.Levels.Lemmas
msgid "Lemmas"
msgstr ""

#: Game.Levels.Lemmas
msgid "Some lemmas that will be useful later on."
msgstr ""

#: Game.Levels.NonregProofs.L01_First
msgid "First Proof"
msgstr ""

#: Game.Levels.NonregProofs.L01_First
msgid "This text is shown as first message when the level is played.\n"
"You can insert hints in the proof below. They will appear in this side panel\n"
"depending on the proof a user provides."
msgstr ""

#: Game.Levels.NonregProofs.L01_First
msgid "You can first nonreg either start using `«{h}»` or `«{g}»`."
msgstr ""

#: Game.Levels.NonregProofs.L01_First
msgid "You should use `«{h}»` now."
msgstr ""

#: Game.Levels.NonregProofs.L01_First
msgid "You should use `«{g}»` now."
msgstr ""

#: Game.Levels.NonregProofs.L01_First
msgid "This last message appears if the level is solved."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "Proving the nonregularity of aⁿbⁿ"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "We are finally ready to work through a proof that utilizes the pumping lemma!\n"
"The proof on paper is as follows:\n"
"-\n"
"...\n"
"-\n"
"\n"
"We will want to replicate the structure of the proof in Lean, but it will turn out\n"
"that some of the steps are far more difficult to realize than on paper. Therefore,\n"
"we will mostly guide you through each of the individual steps; you should therefore\n"
"try to follow the instructions closely, as later steps might be contingent on earlier\n"
"ones so that the proof state is in a fitting form."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "Let's first `rw [pumping_property]` to recall the definition of the pumping\n"
"property, then `push_neg` to push the negation all the way in."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "We can now replicate the initial 'let n > 0' part of the proof with `intro n hpos`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "The word we want to use is z = aⁿbⁿ.\n"
"Let's introduce it with `set z : Word := ('a' ^ n) ∘ 'b' ^ n with hz`"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "We will need to show that z is actually an element of the language anbn in\n"
"a second, so let's introduce that as a new hypothesis: `have hzinanbn : z ∈ anbn`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "After rewriting with `anbn` and `Set.mem_setOf_eq`, we can just `use n`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "`use z`"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "`constructor` will split the conjunction into separate proofs."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "`exact «{hzinanbn}»` closes the goal directly."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "We once again use `constructor` to handle the conjunction."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "We need to show that the length of z is indeed greater than n. You can\n"
"`rw` step by step with some of the lemmas that we showed in the previous world,\n"
"and then use the `omega` tactic once you arrive at a proof state of the form\n"
"`n + n > n`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "The exact hypotheses for rewriting that you should use\n"
"are `«{hz}»`, `cat_len`, `pow_len`, and `pow_len` again."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "We can finally get to the main part of the proof! First of all, we need\n"
"to introduce all the conditions that we also introduce in the paper proof:\n"
"\n"
"`intro u v w hcons hlenlower hv`"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "Let's look at our hypotheses: ...\n"
"\n"
"We now need to provide a suitable `i`; in the paper proof we set `i := 2`,\n"
"so let's `use 2`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "In our paper proof, we made an argument for why there are no b's in `«{v}»`. For our formalization, let's have this as a separate hypothesis:\n"
"\n"
"`have honlyas : «{v}».count 'b' = 0`"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "Let's simplify the entire proof state with\n"
"`simp_all only [gt_iff_lt, «{z}», ↓Char.isValue]`"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "The argument in our proof works to show that there are no b's in\n"
"`uv`. Let's show that first: `have huv : (u ∘ v).count 'b' = 0`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "We need to utilize the associativity that we proved earlier:\n"
"\n"
"`rw [← Word.cat_assoc] at hcons`\n"
"\n"
"Following that, use the tactic `symm at «{hcons}»`"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "For this specific situation, the lemma `Word.cons_a` is already provided to us, so you can finish the subproof with\n"
"\n"
"`apply Word.cons_a «{n}» («{u}» ∘ «{v}») «{w}» ('b' ^ «{n}») «{hcons}» «{hlenlower}»`"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "We can now use the fresh hypothesis `«{huv}»`:\n"
"\n"
"`exact (@Word.cat_count_zero 'b' «{u}» «{v}» «{huv}»).right`"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "For the next step of our proof, we showed that `«{v}»` contained at least\n"
"one 'a'. This will unfortunately be much more involved to show!"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "We have a lot of unnecessary hypotheses, so let's remove them:\n"
"\n"
"`clear «{hzinanbn}» «{hlenlower}» «{hcons}» «{hz}» «{u}» «{w}» «{z}» «{hpos}» «{n}» «{hzcharsinab}» «{hsub}»`"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "The fact that v contains no a's should follow quite obviously from\n"
"«{honlyas}» and «{hvchars}».\n"
"\n"
"We still need to do the rest of the work to show our statement. Let's pattern match\n"
"on `«{v}»` with `rcases v with _ | ⟨s, w⟩`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "«{hv}» states that our word should have a length of at least 1, but\n"
"the empty word `ε` has a length of 0, meaning that we get a contradiction\n"
"in our hypotheses. As we can achieve any goal from a false hypothesis,\n"
"this is exactly what we want!\n"
"\n"
"To reduce «{hv}» to false, just use `simp [Word.length] at «{hv}»`, which\n"
"will also do some additional steps that end up closing the goal directly."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "Let's use `simp_all [Word.length, Word.count]` to simplify our proof state."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "At this point, we don't specifically care about the fact that `«{w}».count 'a'`\n"
"specifically describes how many a's there are in «{w}» - we just care about the fact that\n"
"it is some arbitrary natural number. We can therefore make the proof state a bit more\n"
"readible by generalizing it into some number `n`:\n"
"\n"
"`generalize «{w}».count 'a' = n at *`"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "We an now look at at the if statement in our goal: `split_ifs with hs`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "This inequality is obviously true for any «{n}», so let's solve it directly\n"
"with `omega`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "According to `«{hvchars}»`, `«{s}»` is either 'a' or 'b', and `«{hs}»` states that\n"
"`«{s}»` is not 'a' - therefore, `«{s}»` must be 'b'! Let's show this as a new hypothesis:\n"
"\n"
"`have hsb : «{s}» = 'b'`"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "Let's remove the unrequired elements: `clear «{honlyas}» «{n}»`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "We want to mutate `«{hvchars}»` into a form where it essentially directly states\n"
"that `«{s}»` is either 'a' or 'b', so that `simp_all` can take care of the rest.\n"
"\n"
"Start with `rw [Word.chars] at «{hvchars}»`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "We can apply a preexisting theorem that shows how unions interact with subsets:\n"
"\n"
"`apply Set.union_subset_iff.mp at «{hvchars}»`"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "From here on out, the proof state contains enough information that `simp_all`\n"
"will close the goal."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "The new hypothesis `«{hsb}»` has added sufficient information to our proof state\n"
"that another `simp_all` will close the goal now."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "We can now work through the main step of the proof. We want to show a negated\n"
"statement. For a statement `φ`, its negation `¬φ` will actually be equivalent to\n"
"`φ → False` in Lean, so our goal is actually an implication right now. We therefore want to\n"
"proceed by introducing the antecedent: `intro hin`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "Let's simplify the newly introduced hypothesis so it's in a form that's more useful to\n"
"us: `simp [Word.pow, cat_eps] at «{hin}»`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "To make several of our hypotheses easier to read, let's proceed with another\n"
"simplification: `simp_all [cat_assoc, «{z}»]`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "After this last `simp_all`, our proof state contains some hypotheses that our no longer\n"
"necessary. Let's remove them with `clear «{hlenlower}» «{hzinanbn}» «{hv}» «{hpos}» «{z}»`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "Our hypothesis `«{hin}»` states that `uvvw` is a word in the language `aⁿbⁿ`. Let's\n"
"understand what this means exactly with `simp [anbn_lang, anbn] at «{hin}»`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "Since `uvvw` is in `aⁿbⁿ`, there must be some `n` such that `uvvw = aⁿbⁿ`. Let's access\n"
"this `n` with `rcases «{hin}» with ⟨m, hm⟩`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "Our goal is to show some sort of contradiction now. The idea is that due to `«{hm}»`, the\n"
"number of a's and b's in `uvvw` has to be equal. But according to `«{hcons}»`, `«{honlyas}»`,\n"
"and `«{hatleastonea}»`, those counts have to be different!\n"
"\n"
"Let's show the first statement now:\n"
"`have heven : («{u}» ∘ «{v}» ∘ «{v}» ∘ «{w}»).count 'a' = («{u}» ∘ «{v}» ∘ «{v}» ∘ «{w}»).count 'b'`"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "This statement should follow quite directly from `«{hm}»`, but is a little convoluted\n"
"to prove manually, so we want to employ `simp` once again.\n"
"Let's open by rewriting with `«{hm}»`: `rw [«{hm}»]`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "Remember that we stated the lemma `cat_count` to handle counts of concatenations,\n"
"and further `pow_count` to state that #ₐ(aⁿ) = n. These two facts are obviously enough to\n"
"show the goal right now, so let's just close it directly with\n"
"`simp [cat_count, pow_count]`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "The more involved proof will be to use the previously proven hypotheses to show\n"
"that the number of a's in `«{u}»«{v}»«{v}»«{w}»` differs from the number of b's.\n"
"We first want to show that `«{u}»«{v}»«{w}»` indeed has the same amount of a's and b's.\n"
"\n"
"`have hcount : («{u}» ∘ «{v}» ∘ «{w}»).count 'a' = («{u}» ∘ «{v}» ∘ «{w}»).count 'b'`"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "This is based on the fact that `«{u}»«{v}»«{w}» = aⁿbⁿ`, so let's substitute it back with\n"
"`rw [← «{hcons}»]`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "Our proof state is almost exactly the same as at the end of our previous hypothesis\n"
"`heven`, so the lemmas `cat_count` and `pow_count` are essentially enough to solve the\n"
"goal:"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "Since both `«{u}»«{v}»«{w}»` and `«{u}»«{v}»«{v}»«{w}»` have the same count of a's and b's, «{v}» must\n"
"have the same count as well:\n"
"\n"
"`have hveqcount : «{v}».count 'a' = «{v}».count 'b'`"
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "The two hypotheses that the goal should intuitively follow from are `«{hcount}»` and\n"
"`«{heven}»`, so let's transform them into sums with `simp [cat_count] at hcount heven`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "This is now essentially just a simple arithmetic problem, so let's close the goal\n"
"with `omega`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "The previous hypotheses we showed were only steps to get to «{hveqcount}»; to have a\n"
"clearer view of what we actually need, let's remove them again:\n"
"`clear «{heven}» «{hcount}» «{hm}» «{m}» «{hcons}»`."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "The contradiction we now receive boils down to the fact that according to `«{hveqcount}»`,\n"
"`«{v}»` contains as many a's as b's, but according to `«{honlyas}»` and `«{hatleastonea}»`, that\n"
"number should be different.\n"
"\n"
"At this point our hypotheses contain enough information that `simp_all` or `omega` will\n"
"close the goal, but if you want you can try to go for a more manual approach."
msgstr ""

#: Game.Levels.NonregProofs.L02_Proof
msgid "This last message appears if the level is solved."
msgstr ""

#: Game.Levels.NonregProofs
msgid "Nonregularity Proofs"
msgstr ""

#: Game.Levels.NonregProofs
msgid "The proofs themselves"
msgstr ""

#: Game
msgid "Pumping Lemma Game"
msgstr ""

#: Game
msgid "This text appears on the starting page where one selects the world/level to play.\n"
"You can use markdown."
msgstr ""

#: Game
msgid "Here you can put additional information about the game. It is accessible\n"
"from the starting through the drop-down menu.\n"
"\n"
"For example: Game version, Credits, Link to Github and Zulip, etc.\n"
"\n"
"Use markdown."
msgstr ""

#: Game
msgid "Game Template"
msgstr ""

#: Game
msgid "You should use this game as a template for your own game and add your own levels."
msgstr ""
