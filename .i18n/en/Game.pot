msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Wed Jul 16 22:46:27 2025\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! 🎉"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings… 🎭"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! 🎉"
msgstr ""

#: Game.Levels.LeanBasics.L01_rfl
msgid "rfl"
msgstr ""

#: Game.Levels.LeanBasics.L01_rfl
msgid "# Introduction\n"
"Let's look at some of the very basics of Lean.\n"
"## Proof state\n"
"In the middle bottom of the screen, you'll find the proof state, which includes\n"
"both the goal of the proof, as well as all objects and assumptions that you may\n"
"use to arrive at the proof.\n"
"## rfl\n"
"The `rfl` tactic closes the goal with pure reflexivity."
msgstr ""

#: Game.Levels.LeanBasics.L01_rfl
msgid "Use `rfl` to close the goal immediately."
msgstr ""

#: Game.Levels.LeanBasics.L01_rfl
msgid "Good! `rfl` isn't required very often, but we do need it sometimes."
msgstr ""

#: Game.Levels.LeanBasics.L02_exact
msgid "exact"
msgstr ""

#: Game.Levels.LeanBasics.L02_exact
msgid "# exact\n"
"whenever a hypothesis matches the goal precisely, we can use `exact` to close out the goal."
msgstr ""

#: Game.Levels.LeanBasics.L02_exact
msgid "Use `exact «{h}»` to close the goal immediately."
msgstr ""

#: Game.Levels.LeanBasics.L02_exact
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L03_Third
msgid "Third Level"
msgstr ""

#: Game.Levels.LeanBasics.L03_Third
msgid "# Introduction\n"
"In this level, we'll be looking at..."
msgstr ""

#: Game.Levels.LeanBasics.L03_Third
msgid "You can either abc start using"
msgstr ""

#: Game.Levels.LeanBasics.L03_Third
msgid "You should use `«{h}»` now."
msgstr ""

#: Game.Levels.LeanBasics.L03_Third
msgid "You should use `«{g}»` now."
msgstr ""

#: Game.Levels.LeanBasics.L03_Third
msgid "This last message appears if the level is solved."
msgstr ""

#: Game.Levels.LeanBasics.L04_intro
msgid "exact"
msgstr ""

#: Game.Levels.LeanBasics.L04_intro
msgid "# intro\n"
"We use the `intro` tactic to handle both `∀`-statements, and to introduce the antecedent\n"
"of an implication."
msgstr ""

#: Game.Levels.LeanBasics.L04_intro
msgid "start with `intro A`"
msgstr ""

#: Game.Levels.LeanBasics.L04_intro
msgid "Now, `intro ha` will introduce the antecedent into our given hypotheses."
msgstr ""

#: Game.Levels.LeanBasics.L04_intro
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L05_apply
msgid "apply"
msgstr ""

#: Game.Levels.LeanBasics.L05_apply
msgid "# apply\n"
"whenever a hypothesis matches the goal precisely, we can use `exact` to close out the goal."
msgstr ""

#: Game.Levels.LeanBasics.L05_apply
msgid "Use `apply «{hAB}» at «{hA}»`."
msgstr ""

#: Game.Levels.LeanBasics.L05_apply
msgid "`exact «{hA}»` will close the goal now."
msgstr ""

#: Game.Levels.LeanBasics.L05_apply
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L06_have
msgid "have"
msgstr ""

#: Game.Levels.LeanBasics.L06_have
msgid "# have\n"
"Sometimes, we want to construct sub-hypotheses of our own. We can do this with the\n"
"`have` tactic."
msgstr ""

#: Game.Levels.LeanBasics.L06_have
msgid "Use `exact «{h}»` to close the goal immediately"
msgstr ""

#: Game.Levels.LeanBasics.L06_have
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L07_clear
msgid "exact"
msgstr ""

#: Game.Levels.LeanBasics.L07_clear
msgid "# clear\n"
"Sometimes, especially when proving a lemma via `have`, the proof state might include a\n"
"lot of hypotheses that are not necessary to achieve the current goal. To keep them from\n"
"distracting us, we can use the `clear` tactic to remove them."
msgstr ""

#: Game.Levels.LeanBasics.L07_clear
msgid "Use `clear «{a}» «{b}» «{c}» «{d}» «{e}» «{f}» «{hy}» «{hz}» «{y}» «{z}»` to remove the unneeded hypotheses"
msgstr ""

#: Game.Levels.LeanBasics.L07_clear
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L08_constructor
msgid "exact"
msgstr ""

#: Game.Levels.LeanBasics.L08_constructor
msgid "# Induction\n"
"To work through certain structures, the `constructor` can be useful."
msgstr ""

#: Game.Levels.LeanBasics.L08_constructor
msgid "Use `constructor` to split the conjunction we want to prove into two separate goals."
msgstr ""

#: Game.Levels.LeanBasics.L08_constructor
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L09_induction
msgid "exact"
msgstr ""

#: Game.Levels.LeanBasics.L09_induction
msgid "# Induction\n"
"We utilize several inductive structures that we can handle with the `induction'` tactic."
msgstr ""

#: Game.Levels.LeanBasics.L09_induction
msgid "Use `induction' «{n}» with n ih` to start a proof by induction"
msgstr ""

#: Game.Levels.LeanBasics.L09_induction
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L10_match
msgid "exact"
msgstr ""

#: Game.Levels.LeanBasics.L10_match
msgid "# match\n"
"For some structures, we might just need to match the forms that they can appear in."
msgstr ""

#: Game.Levels.LeanBasics.L10_match
msgid "Use `exact «{h}»` to close the goal immediately"
msgstr ""

#: Game.Levels.LeanBasics.L10_match
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L11_simp_only
msgid "exact"
msgstr ""

#: Game.Levels.LeanBasics.L11_simp_only
msgid "# simp only\n"
"whenever a hypothesis matches the goal precisely, we can use `exact` to close out the goal."
msgstr ""

#: Game.Levels.LeanBasics.L11_simp_only
msgid "Use `exact «{h}»` to close the goal immediately"
msgstr ""

#: Game.Levels.LeanBasics.L11_simp_only
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L12_simp_all_only
msgid "exact"
msgstr ""

#: Game.Levels.LeanBasics.L12_simp_all_only
msgid "# simp_all only\n"
"whenever a hypothesis matches the goal precisely, we can use `exact` to close out the goal."
msgstr ""

#: Game.Levels.LeanBasics.L12_simp_all_only
msgid "Use `exact «{h}»` to close the goal immediately"
msgstr ""

#: Game.Levels.LeanBasics.L12_simp_all_only
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L13_omega
msgid "omega"
msgstr ""

#: Game.Levels.LeanBasics.L13_omega
msgid "# omega\n"
"The tactic `omega` can solve integer and natural linear arithmetic problems."
msgstr ""

#: Game.Levels.LeanBasics.L13_omega
msgid "Use `omega` to close the goal immediately"
msgstr ""

#: Game.Levels.LeanBasics.L13_omega
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics.L14_split_ifs
msgid "split_ifs"
msgstr ""

#: Game.Levels.LeanBasics.L14_split_ifs
msgid "# omega\n"
"The tactic `omega` can solve integer and natural linear arithmetic problems."
msgstr ""

#: Game.Levels.LeanBasics.L14_split_ifs
msgid "Good!"
msgstr ""

#: Game.Levels.LeanBasics
msgid "Lean Basics"
msgstr ""

#: Game.Levels.LeanBasics
msgid "This introductory part serves as a refresher for Lean."
msgstr ""

#: Game.Levels.Lemmas.L01_Introduction
msgid "First Lemma"
msgstr ""

#: Game.Levels.Lemmas.L01_Introduction
msgid "This text is shown as first message when the level is played.\n"
"You can insert hints in the proof below. They will appear in this side panel\n"
"depending on the proof a user provides."
msgstr ""

#: Game.Levels.Lemmas.L01_Introduction
msgid "You can lemma either start using `«{h}»` or `«{g}»`."
msgstr ""

#: Game.Levels.Lemmas.L01_Introduction
msgid "You should use `«{h}»` now."
msgstr ""

#: Game.Levels.Lemmas.L01_Introduction
msgid "You should use `«{g}»` now."
msgstr ""

#: Game.Levels.Lemmas.L01_Introduction
msgid "This last message appears if the level is solved."
msgstr ""

#: Game.Levels.Lemmas.L02_cat_eps
msgid "cat_eps"
msgstr ""

#: Game.Levels.Lemmas.L02_cat_eps
msgid "Let's prove a simple lemma: concatenating any word with the empty word should yield the word itself."
msgstr ""

#: Game.Levels.Lemmas.L02_cat_eps
msgid "Concatenating a word with ε yields the original word."
msgstr ""

#: Game.Levels.Lemmas.L02_cat_eps
msgid "Concatenation of words: for two words w₁ and w₂, the concatenation w₁ and w₂ yields w₁w₂."
msgstr ""

#: Game.Levels.Lemmas.L02_cat_eps
msgid "A word over an alphabet, i.e. a string of symbols from that alphabet."
msgstr ""

#: Game.Levels.Lemmas.L02_cat_eps
msgid "Good!"
msgstr ""

#: Game.Levels.Lemmas.L03_cat_assoc
msgid "cat_assoc"
msgstr ""

#: Game.Levels.Lemmas.L03_cat_assoc
msgid "Let's prove a simple lemma: concatenating any word with the empty word should yield the word itself."
msgstr ""

#: Game.Levels.Lemmas.L03_cat_assoc
msgid "Concatenation of words is associative, e.g. (x ∘ y) ∘ z = x ∘ (y ∘ z)."
msgstr ""

#: Game.Levels.Lemmas.L03_cat_assoc
msgid "Good!"
msgstr ""

#: Game.Levels.Lemmas.L04_gap
msgid "cat_assoc"
msgstr ""

#: Game.Levels.Lemmas.L04_gap
msgid "Let's prove a simple lemma: concatenating any word with the empty word should yield the word itself."
msgstr ""

#: Game.Levels.Lemmas.L04_gap
msgid "Good!"
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "assoc_count"
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "Let's prove a simple lemma: concatenating any word with the empty word should yield the word itself."
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "for the concatenation of two words, counting the occurrences of a certain character in the entire word\n"
"is the same as counting the occurrences in both subwords and adding them up."
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "Counts how often a character occurs in a word."
msgstr ""

#: Game.Levels.Lemmas.L05_cat_count
msgid "Good!"
msgstr ""

#: Game.Levels.Lemmas.L06_cat_count_zero
msgid "cat_count_zero"
msgstr ""

#: Game.Levels.Lemmas.L06_cat_count_zero
msgid "Let's prove a simple lemma: concatenating any word with the empty word should yield the word itself."
msgstr ""

#: Game.Levels.Lemmas.L06_cat_count_zero
msgid "If a symbol doesn't occur in the concatenation of two words, then it won't occur in any of the two words either."
msgstr ""

#: Game.Levels.Lemmas.L06_cat_count_zero
msgid "Good!"
msgstr ""

#: Game.Levels.Lemmas.L07_cat_len
msgid "cat_len"
msgstr ""

#: Game.Levels.Lemmas.L07_cat_len
msgid "Let's prove a simple lemma: concatenating any word with the empty word should yield the word itself."
msgstr ""

#: Game.Levels.Lemmas.L07_cat_len
msgid "To determine the length of the concatenation of two words, you can add the length of both words."
msgstr ""

#: Game.Levels.Lemmas.L07_cat_len
msgid "The amount of symbols in a word."
msgstr ""

#: Game.Levels.Lemmas.L07_cat_len
msgid "Good!"
msgstr ""

#: Game.Levels.Lemmas.L08_pow_len
msgid "pow_len"
msgstr ""

#: Game.Levels.Lemmas.L08_pow_len
msgid "Let's prove a simple lemma: concatenating any word with the empty word should yield the word itself."
msgstr ""

#: Game.Levels.Lemmas.L08_pow_len
msgid "The length of cⁿ is n for any character c."
msgstr ""

#: Game.Levels.Lemmas.L08_pow_len
msgid "The power of a symbol: aⁿ = a...a repeated n times."
msgstr ""

#: Game.Levels.Lemmas.L08_pow_len
msgid "Good!"
msgstr ""

#: Game.Levels.Lemmas.L09_pow_count
msgid "pow_count"
msgstr ""

#: Game.Levels.Lemmas.L09_pow_count
msgid "Let's prove a simple lemma: concatenating any word with the empty word should yield the word itself."
msgstr ""

#: Game.Levels.Lemmas.L09_pow_count
msgid "A word of the form cⁿ will contain n instances of the character c, and none of any other character."
msgstr ""

#: Game.Levels.Lemmas.L09_pow_count
msgid "Good!"
msgstr ""

#: Game.Levels.Lemmas
msgid "Lemmas"
msgstr ""

#: Game.Levels.Lemmas
msgid "Some lemmas that will be useful later on."
msgstr ""

#: Game.Levels.NonregProofs.L01_First
msgid "First Proof"
msgstr ""

#: Game.Levels.NonregProofs.L01_First
msgid "This text is shown as first message when the level is played.\n"
"You can insert hints in the proof below. They will appear in this side panel\n"
"depending on the proof a user provides."
msgstr ""

#: Game.Levels.NonregProofs.L01_First
msgid "You can first nonreg either start using `«{h}»` or `«{g}»`."
msgstr ""

#: Game.Levels.NonregProofs.L01_First
msgid "You should use `«{h}»` now."
msgstr ""

#: Game.Levels.NonregProofs.L01_First
msgid "You should use `«{g}»` now."
msgstr ""

#: Game.Levels.NonregProofs.L01_First
msgid "This last message appears if the level is solved."
msgstr ""

#: Game.Levels.NonregProofs
msgid "Nonregularity Proofs"
msgstr ""

#: Game.Levels.NonregProofs
msgid "The proofs themselves"
msgstr ""

#: Game
msgid "Pumping Lemma Game"
msgstr ""

#: Game
msgid "This text appears on the starting page where one selects the world/level to play.\n"
"You can use markdown."
msgstr ""

#: Game
msgid "Here you can put additional information about the game. It is accessible\n"
"from the starting through the drop-down menu.\n"
"\n"
"For example: Game version, Credits, Link to Github and Zulip, etc.\n"
"\n"
"Use markdown."
msgstr ""

#: Game
msgid "Game Template"
msgstr ""

#: Game
msgid "You should use this game as a template for your own game and add your own levels."
msgstr ""
